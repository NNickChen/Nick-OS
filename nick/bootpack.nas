[FORMAT "WCOFF"]
[INSTRSET "i486p"]
[OPTIMIZE 1]
[OPTION 1]
[BITS 32]
	EXTERN	_fifo32_init
	EXTERN	_init_gdtidt
	EXTERN	_init_pic
	EXTERN	_io_sti
	EXTERN	_init_pit
	EXTERN	_init_keyboard
	EXTERN	_enable_mouse
	EXTERN	_io_out8
	EXTERN	_memtest
	EXTERN	_memman_init
	EXTERN	_memman_free
	EXTERN	_init_palette
	EXTERN	_shtctl_init
	EXTERN	_task_init
	EXTERN	_task_run
	EXTERN	_memman_alloc_4k
	EXTERN	_file_readfat
	EXTERN	_file_search
	EXTERN	_file_load
	EXTERN	_memman_free_4k
	EXTERN	_sheet_alloc
	EXTERN	_sheet_setbuf
	EXTERN	_init_screen8
	EXTERN	_task_alloc
	EXTERN	_time_task
	EXTERN	_init_mouse_cursor8
	EXTERN	_sheet_slide
	EXTERN	_sheet_updown
	EXTERN	_fifo32_put
	EXTERN	_fifo32_status
	EXTERN	_io_cli
	EXTERN	_fifo32_get
	EXTERN	_sheet_free
	EXTERN	_taskctl
	EXTERN	_mouse_decode
	EXTERN	_sprintf
	EXTERN	_get_bc
	EXTERN	_putfonts8_asc_sht
	EXTERN	_end_app
	EXTERN	_keytable.0
	EXTERN	_boxfill8
	EXTERN	_sheet_refresh
	EXTERN	_wait_KBC_sendready
	EXTERN	_keytable1.1
	EXTERN	_task_sleep
	EXTERN	_english
	EXTERN	_change_wtitle8
	EXTERN	_task_now
	EXTERN	_make_window8
	EXTERN	_make_textbox8
	EXTERN	_console_task
[FILE "bootpack.c"]
[SECTION .data]
_keytable.0:
	DB	0
	DB	0
	DB	49
	DB	50
	DB	51
	DB	52
	DB	53
	DB	54
	DB	55
	DB	56
	DB	57
	DB	48
	DB	45
	DB	61
	DB	8
	DB	9
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	91
	DB	93
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	59
	DB	39
	DB	96
	DB	0
	DB	92
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	44
	DB	46
	DB	47
	DB	0
	DB	0
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
_keytable1.1:
	DB	0
	DB	0
	DB	33
	DB	64
	DB	35
	DB	36
	DB	37
	DB	94
	DB	38
	DB	42
	DB	40
	DB	41
	DB	95
	DB	43
	DB	8
	DB	0
	DB	81
	DB	87
	DB	69
	DB	82
	DB	84
	DB	89
	DB	85
	DB	73
	DB	79
	DB	80
	DB	123
	DB	125
	DB	10
	DB	0
	DB	65
	DB	83
	DB	68
	DB	70
	DB	71
	DB	72
	DB	74
	DB	75
	DB	76
	DB	58
	DB	34
	DB	126
	DB	0
	DB	124
	DB	90
	DB	88
	DB	67
	DB	86
	DB	66
	DB	78
	DB	77
	DB	60
	DB	62
	DB	63
	DB	0
	DB	0
	DB	0
	DB	32
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
	DB	0
LC0:
	DB	"chinese.fnt",0x00
LC2:
	DB	"[lcr %4d %4d]",0x00
LC3:
	DB	"(%3d, %3d)",0x00
LC1:
	DB	"%02X",0x00
[SECTION .text]
	GLOBAL	_HariMain
_HariMain:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EDI
	PUSH	ESI
	PUSH	EBX
	LEA	EBX,DWORD [-44+EBP]
	SUB	ESP,1096
	MOV	DWORD [-1052+EBP],-1
	MOV	DWORD [-1056+EBP],-1
	MOV	DWORD [-1060+EBP],0
	MOV	DWORD [-1064+EBP],0
	MOV	DWORD [-1084+EBP],0
	MOV	DWORD [-1092+EBP],0
	MOV	AL,BYTE [4081]
	PUSH	0
	SAR	AL,4
	MOV	EDX,EAX
	LEA	EAX,DWORD [-764+EBP]
	PUSH	EAX
	AND	EDX,7
	PUSH	32
	LEA	EAX,DWORD [-76+EBP]
	PUSH	EAX
	MOV	DWORD [-1096+EBP],EDX
	MOV	DWORD [-1100+EBP],-1
	MOV	DWORD [-1104+EBP],0
	CALL	_fifo32_init
	CALL	_init_gdtidt
	CALL	_init_pic
	CALL	_io_sti
	LEA	EAX,DWORD [-636+EBP]
	PUSH	0
	PUSH	EAX
	PUSH	128
	PUSH	EBX
	CALL	_fifo32_init
	ADD	ESP,32
	MOV	DWORD [4076],EBX
	CALL	_init_pit
	PUSH	256
	PUSH	EBX
	CALL	_init_keyboard
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	PUSH	512
	PUSH	EBX
	CALL	_enable_mouse
	PUSH	248
	PUSH	33
	CALL	_io_out8
	PUSH	239
	PUSH	161
	CALL	_io_out8
	ADD	ESP,36
	PUSH	-1073741825
	PUSH	4194304
	CALL	_memtest
	PUSH	3932160
	MOV	DWORD [-1068+EBP],EAX
	CALL	_memman_init
	PUSH	647168
	PUSH	4096
	PUSH	3932160
	CALL	_memman_free
	MOV	EAX,DWORD [-1068+EBP]
	SUB	EAX,4194304
	PUSH	EAX
	PUSH	4194304
	PUSH	3932160
	CALL	_memman_free
	ADD	ESP,36
	CALL	_init_palette
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [4088]
	PUSH	3932160
	CALL	_shtctl_init
	MOV	DWORD [4068],EAX
	PUSH	3932160
	MOV	DWORD [-1040+EBP],EAX
	CALL	_task_init
	PUSH	2
	PUSH	1
	MOV	DWORD [-1088+EBP],EAX
	PUSH	EAX
	MOV	DWORD [-20+EBP],EAX
	CALL	_task_run
	MOV	ECX,DWORD [-1088+EBP]
	ADD	ESP,32
	XOR	EAX,EAX
	CMP	BYTE [4096+EDI],-1
	SETNE	AL
	MOV	DWORD [192+ECX],EAX
	MOV	BYTE [196+ECX],0
	PUSH	169552
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	11520
	PUSH	3932160
	MOV	EDI,EAX
	CALL	_memman_alloc_4k
	PUSH	1049088
	MOV	EBX,EAX
	PUSH	EAX
	CALL	_file_readfat
	PUSH	224
	PUSH	1058304
	PUSH	LC0
	CALL	_file_search
	ADD	ESP,36
	TEST	EAX,EAX
	JE	L4
	PUSH	1064448
	PUSH	EBX
	PUSH	EDI
	PUSH	DWORD [28+EAX]
	MOVZX	EAX,WORD [26+EAX]
	PUSH	EAX
	CALL	_file_load
	ADD	ESP,20
L5:
	MOV	DWORD [4072],EDI
	PUSH	11520
	PUSH	EBX
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	DWORD [-1040+EBP]
	CALL	_sheet_alloc
	MOVSX	EDX,WORD [4086]
	MOV	DWORD [-1076+EBP],EAX
	MOVSX	EAX,WORD [4084]
	IMUL	EAX,EDX
	PUSH	EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	PUSH	-1
	MOV	DWORD [-1072+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1072+EBP]
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_setbuf
	ADD	ESP,44
	PUSH	178
	MOVSX	EAX,WORD [4086]
	PUSH	EAX
	MOVSX	EAX,WORD [4084]
	PUSH	EAX
	PUSH	DWORD [-1072+EBP]
	CALL	_init_screen8
	MOV	EDI,DWORD [-1076+EBP]
	CALL	_task_alloc
	PUSH	65536
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	ADD	EAX,65528
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [76+EBX],_time_task
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [4+EAX],EDI
	PUSH	2
	PUSH	1
	PUSH	EBX
	LEA	EBX,DWORD [-1036+EBP]
	CALL	_task_run
	ADD	ESP,36
	MOV	EAX,DWORD [-1040+EBP]
	MOV	DWORD [12308+EAX],EDI
	PUSH	DWORD [-1068+EBP]
	PUSH	EAX
	CALL	_open_console
	PUSH	DWORD [-1040+EBP]
	MOV	EDI,EAX
	CALL	_sheet_alloc
	PUSH	99
	PUSH	16
	MOV	DWORD [-1080+EBP],EAX
	PUSH	16
	PUSH	EBX
	PUSH	EAX
	CALL	_sheet_setbuf
	ADD	ESP,32
	PUSH	99
	PUSH	EBX
	MOV	EBX,2
	CALL	_init_mouse_cursor8
	MOVSX	EAX,WORD [4084]
	LEA	ECX,DWORD [-16+EAX]
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	MOV	DWORD [-1044+EBP],EAX
	MOVSX	EAX,WORD [4086]
	PUSH	0
	LEA	ECX,DWORD [-44+EAX]
	PUSH	0
	MOV	EAX,ECX
	CDQ
	IDIV	EBX
	PUSH	DWORD [-1076+EBP]
	MOV	DWORD [-1048+EBP],EAX
	LEA	EBX,DWORD [-76+EBP]
	CALL	_sheet_slide
	PUSH	4
	PUSH	32
	PUSH	EDI
	CALL	_sheet_slide
	ADD	ESP,32
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1080+EBP]
	CALL	_sheet_slide
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_updown
	PUSH	1
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	2
	PUSH	DWORD [-1080+EBP]
	CALL	_sheet_updown
	ADD	ESP,36
	PUSH	EDI
	CALL	_keywin_on
	PUSH	237
	PUSH	EBX
	CALL	_fifo32_put
	PUSH	DWORD [-1096+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,20
L16:
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	CALL	_fifo32_status
	POP	ECX
	TEST	EAX,EAX
	JLE	L19
	CMP	DWORD [-1100+EBP],0
	JS	L116
L19:
	LEA	EBX,DWORD [-44+EBP]
	CALL	_io_cli
	PUSH	EBX
	CALL	_fifo32_status
	POP	EDX
	TEST	EAX,EAX
	JE	L117
	PUSH	EBX
	CALL	_fifo32_get
	MOV	ESI,EAX
	CALL	_io_sti
	POP	EAX
	TEST	EDI,EDI
	JE	L22
	CMP	DWORD [28+EDI],0
	JNE	L22
	MOV	EDX,DWORD [-1040+EBP]
	XOR	EDI,EDI
	MOV	EAX,DWORD [16+EDX]
	CMP	EAX,1
	JE	L22
	MOV	ECX,DWORD [-1040+EBP]
	MOV	EDI,DWORD [16+ECX+EAX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EAX
L22:
	LEA	EAX,DWORD [-256+ESI]
	CMP	EAX,255
	JBE	L118
	LEA	EAX,DWORD [-512+ESI]
	CMP	EAX,255
	JBE	L119
	LEA	EAX,DWORD [-768+ESI]
	CMP	EAX,255
	JBE	L120
	LEA	EAX,DWORD [-1024+ESI]
	CMP	EAX,999
	JBE	L121
	LEA	EAX,DWORD [-2024+ESI]
	CMP	EAX,255
	JA	L16
	IMUL	EAX,ESI,44
	ADD	EAX,DWORD [-1040+EBP]
	PUSH	250000
	PUSH	DWORD [-88012+EAX]
	PUSH	3932160
	LEA	EBX,DWORD [-88012+EAX]
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	ADD	ESP,16
	JMP	L16
L121:
	IMUL	ESI,ESI,200
	ADD	ESI,DWORD [_taskctl]
	LEA	EAX,DWORD [-200712+ESI]
	PUSH	EAX
	CALL	_close_constask
L112:
	POP	EAX
	JMP	L16
L120:
	IMUL	EAX,ESI,44
	MOV	EDX,DWORD [-1040+EBP]
	LEA	EAX,DWORD [-32748+EAX+EDX*1]
	PUSH	EAX
	CALL	_close_console
	JMP	L112
L119:
	MOV	ECX,ESI
	MOVZX	EAX,CL
	PUSH	EAX
	LEA	EAX,DWORD [-780+EBP]
	PUSH	EAX
	CALL	_mouse_decode
	POP	ESI
	POP	EDX
	TEST	EAX,EAX
	JE	L16
	MOV	EDX,DWORD [-776+EBP]
	MOV	EAX,DWORD [-772+EBP]
	ADD	DWORD [-1044+EBP],EDX
	ADD	DWORD [-1048+EBP],EAX
	CMP	DWORD [-1064+EBP],0
	JE	L69
	PUSH	EAX
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EDX
	PUSH	LC2
	PUSH	EBX
	CALL	_sprintf
	ADD	ESP,16
	MOV	EAX,DWORD [-768+EBP]
	TEST	EAX,1
	JE	L70
	MOV	BYTE [-123+EBP],76
L70:
	TEST	EAX,2
	JE	L71
	MOV	BYTE [-121+EBP],82
L71:
	AND	EAX,4
	JE	L72
	MOV	BYTE [-122+EBP],67
L72:
	PUSH	15
	PUSH	EBX
	PUSH	DWORD [-1072+EBP]
	CALL	_get_bc
	MOV	DWORD [ESP],EAX
	PUSH	7
	PUSH	16
	PUSH	32
	PUSH	DWORD [-1076+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,28
L69:
	CMP	DWORD [-1044+EBP],0
	JS	L122
L73:
	CMP	DWORD [-1048+EBP],0
	JS	L123
L74:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L75
	MOV	DWORD [-1044+EBP],EAX
L75:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L76
	MOV	DWORD [-1048+EBP],EAX
L76:
	CMP	DWORD [-1064+EBP],0
	JE	L77
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	LC3
	LEA	EBX,DWORD [-124+EBP]
	PUSH	EBX
	CALL	_sprintf
	PUSH	10
	PUSH	EBX
	PUSH	DWORD [-1072+EBP]
	CALL	_get_bc
	MOV	DWORD [ESP],EAX
	PUSH	7
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,44
L77:
	CMP	DWORD [-1044+EBP],0
	JS	L124
L78:
	CMP	DWORD [-1048+EBP],0
	JS	L125
L79:
	MOVSX	EAX,WORD [4084]
	DEC	EAX
	CMP	DWORD [-1044+EBP],EAX
	JLE	L80
	MOV	DWORD [-1044+EBP],EAX
L80:
	MOVSX	EAX,WORD [4086]
	DEC	EAX
	CMP	DWORD [-1048+EBP],EAX
	JLE	L81
	MOV	DWORD [-1048+EBP],EAX
L81:
	PUSH	DWORD [-1048+EBP]
	PUSH	DWORD [-1044+EBP]
	PUSH	DWORD [-1080+EBP]
	CALL	_sheet_slide
	ADD	ESP,12
	TEST	DWORD [-768+EBP],1
	JNE	L126
	MOV	DWORD [-1052+EBP],-1
	JMP	L16
L126:
	CMP	DWORD [-1052+EBP],0
	JS	L127
	MOV	ESI,DWORD [-1044+EBP]
	MOV	EBX,DWORD [-1048+EBP]
	MOV	ECX,DWORD [-1084+EBP]
	MOV	EDX,DWORD [-1060+EBP]
	SUB	ESI,DWORD [-1052+EBP]
	SUB	EBX,DWORD [-1056+EBP]
	ADD	EBX,DWORD [16+ECX]
	LEA	EAX,DWORD [2+ESI+EDX*1]
	PUSH	EBX
	AND	EAX,-4
	PUSH	EAX
	PUSH	ECX
	CALL	_sheet_slide
	ADD	ESP,12
	MOV	ECX,DWORD [-1048+EBP]
	MOV	DWORD [-1056+EBP],ECX
L97:
	TEST	BYTE [28+EDI],16
	JE	L16
	PUSH	13
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	MOV	EAX,DWORD [-1044+EBP]
	ADD	EAX,512
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	PUSH	14
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	MOV	EAX,DWORD [-1048+EBP]
	ADD	EAX,512
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	ADD	ESP,32
	JMP	L16
L127:
	MOV	EDX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+EDX]
	LEA	EDX,DWORD [-1+EAX]
	TEST	EDX,EDX
	JLE	L97
L96:
	MOV	ECX,DWORD [-1040+EBP]
	MOV	EBX,DWORD [-1048+EBP]
	MOV	ESI,DWORD [-1044+EBP]
	MOV	ECX,DWORD [20+ECX+EDX*4]
	MOV	DWORD [-1084+EBP],ECX
	SUB	EBX,DWORD [16+ECX]
	SUB	ESI,DWORD [12+ECX]
	JS	L86
	CMP	ESI,DWORD [4+ECX]
	JGE	L86
	TEST	EBX,EBX
	JS	L86
	CMP	EBX,DWORD [8+ECX]
	JL	L128
L86:
	DEC	EDX
	TEST	EDX,EDX
	JG	L96
	JMP	L97
L128:
	CMP	ECX,EDI
	JE	L89
	DEC	EAX
	PUSH	EAX
	PUSH	ECX
	CALL	_sheet_updown
	PUSH	EDI
	CALL	_keywin_off
	MOV	EDI,DWORD [-1084+EBP]
	PUSH	EDI
	CALL	_keywin_on
	ADD	ESP,16
L89:
	CMP	EBX,19
	JG	L97
	MOV	EAX,DWORD [-1044+EBP]
	MOV	EDX,DWORD [-1048+EBP]
	MOV	DWORD [-1052+EBP],EAX
	MOV	DWORD [-1056+EBP],EDX
	MOV	EAX,DWORD [-1084+EBP]
	MOV	ECX,DWORD [-1084+EBP]
	MOV	EDX,DWORD [4+EAX]
	MOV	ECX,DWORD [12+ECX]
	MOV	DWORD [-1060+EBP],ECX
	LEA	EAX,DWORD [-21+EDX]
	CMP	EAX,ESI
	JG	L97
	LEA	EAX,DWORD [-5+EDX]
	CMP	ESI,EAX
	JG	L97
	CMP	EBX,4
	JLE	L97
	CMP	EBX,19
	JG	L97
	MOV	EDX,DWORD [-1084+EBP]
	TEST	BYTE [28+EDX],16
	JNE	L111
	PUSH	-1
	PUSH	EDX
	CALL	_sheet_updown
	PUSH	EDI
	CALL	_keywin_off
	ADD	ESP,12
	MOV	ECX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+ECX]
	CMP	EAX,1
	JLE	L94
	MOV	EDI,DWORD [16+ECX+EAX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EBX
L95:
	CALL	_io_cli
	MOV	EDX,DWORD [-1084+EBP]
	PUSH	4
	MOV	EAX,DWORD [36+EDX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	CALL	_io_sti
	POP	EDX
	POP	ECX
	JMP	L97
L94:
	XOR	EDI,EDI
	JMP	L95
L111:
	MOV	EDX,DWORD [-1084+EBP]
	MOV	EBX,DWORD [36+EDX]
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_end_app
	CALL	_io_sti
	JMP	L97
L125:
	MOV	DWORD [-1048+EBP],0
	JMP	L79
L124:
	MOV	DWORD [-1044+EBP],0
	JMP	L78
L123:
	MOV	DWORD [-1048+EBP],0
	JMP	L74
L122:
	MOV	DWORD [-1044+EBP],0
	JMP	L73
L118:
	CMP	DWORD [-1064+EBP],0
	JE	L26
	PUSH	EAX
	LEA	EBX,DWORD [-124+EBP]
	PUSH	LC1
	PUSH	EBX
	CALL	_sprintf
	PUSH	2
	PUSH	EBX
	PUSH	DWORD [-1072+EBP]
	CALL	_get_bc
	MOV	DWORD [ESP],EAX
	PUSH	7
	PUSH	16
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_putfonts8_asc_sht
	ADD	ESP,40
L26:
	CMP	ESI,339
	JG	L27
	CMP	DWORD [-1104+EBP],0
	JNE	L27
	CMP	DWORD [-1092+EBP],0
	JNE	L28
	MOV	AL,BYTE [_keytable.0-256+ESI]
L114:
	MOV	BYTE [-124+EBP],AL
L30:
	MOV	DL,BYTE [-124+EBP]
	LEA	EAX,DWORD [-65+EDX]
	CMP	AL,25
	JA	L31
	TEST	DWORD [-1096+EBP],4
	JNE	L32
	CMP	DWORD [-1092+EBP],0
	JE	L115
L32:
	TEST	DWORD [-1096+EBP],4
	JE	L31
	CMP	DWORD [-1092+EBP],0
	JE	L31
L115:
	LEA	EAX,DWORD [32+EDX]
	MOV	BYTE [-124+EBP],AL
L31:
	MOV	AL,BYTE [-124+EBP]
	TEST	AL,AL
	JE	L35
	TEST	EDI,EDI
	JE	L35
	MOVSX	EAX,AL
	ADD	EAX,256
	PUSH	EAX
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
L35:
	CMP	ESI,328
	JE	L129
L36:
	CMP	ESI,336
	JE	L130
L37:
	CMP	ESI,331
	JE	L131
L38:
	CMP	ESI,333
	JE	L132
L39:
	CMP	ESI,257
	JE	L133
L40:
	CMP	ESI,271
	JE	L134
L41:
	CMP	ESI,298
	JE	L135
L43:
	CMP	ESI,310
	JE	L136
L44:
	CMP	ESI,426
	JE	L137
L45:
	CMP	ESI,438
	JE	L138
L46:
	CMP	ESI,285
	JE	L139
L47:
	CMP	ESI,413
	JE	L140
L48:
	CMP	ESI,314
	JE	L141
L49:
	CMP	ESI,325
	JE	L142
L50:
	CMP	ESI,326
	JE	L143
L51:
	CMP	ESI,506
	JE	L144
L52:
	CMP	ESI,510
	JE	L145
L53:
	CMP	ESI,257
	JE	L146
L54:
	CMP	ESI,343
	JE	L147
L56:
	CMP	ESI,315
	JE	L148
L57:
	CMP	ESI,316
	JNE	L61
	CMP	DWORD [-1092+EBP],0
	JE	L16
	TEST	EDI,EDI
	JE	L62
	PUSH	EDI
	CALL	_keywin_off
	POP	EDI
L62:
	PUSH	DWORD [-1068+EBP]
	PUSH	DWORD [-1040+EBP]
	CALL	_open_console
	PUSH	4
	PUSH	32
	MOV	EDI,EAX
	PUSH	EAX
	CALL	_sheet_slide
	MOV	EAX,DWORD [-1040+EBP]
	PUSH	DWORD [16+EAX]
	PUSH	EDI
	CALL	_sheet_updown
	PUSH	EDI
	CALL	_keywin_on
	ADD	ESP,32
L61:
	CMP	DWORD [-1092+EBP],0
	JE	L16
	CMP	ESI,317
	JNE	L16
	MOV	EAX,DWORD [36+EDI]
	CMP	DWORD [192+EAX],0
	JE	L149
	MOV	DWORD [192+EAX],0
	PUSH	6
L113:
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L16
L149:
	MOV	DWORD [192+EAX],1
	PUSH	5
	JMP	L113
L148:
	CMP	DWORD [-1092+EBP],0
	JE	L57
	TEST	EDI,EDI
	JE	L57
	CMP	DWORD [-1064+EBP],0
	JNE	L110
	MOV	DWORD [-1064+EBP],1
	JMP	L57
L110:
	PUSH	60
	PUSH	150
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1072+EBP]
	CALL	_get_bc
	MOV	ECX,DWORD [-1076+EBP]
	MOVZX	EAX,AL
	MOV	DWORD [ESP],EAX
	PUSH	DWORD [4+ECX]
	PUSH	DWORD [-1072+EBP]
	CALL	_boxfill8
	PUSH	60
	PUSH	150
	PUSH	0
	PUSH	0
	PUSH	DWORD [-1076+EBP]
	CALL	_sheet_refresh
	ADD	ESP,48
	MOV	DWORD [-1064+EBP],0
	JMP	L57
L147:
	MOV	EDX,DWORD [-1040+EBP]
	MOV	EAX,DWORD [16+EDX]
	DEC	EAX
	PUSH	EAX
	PUSH	DWORD [24+EDX]
	CALL	_sheet_updown
	POP	EAX
	POP	EDX
	JMP	L56
L146:
	CMP	DWORD [-1092+EBP],0
	JE	L54
	MOV	EBX,DWORD [36+EDI]
	TEST	EBX,EBX
	JE	L54
	CMP	DWORD [52+EBX],0
	JE	L54
	CALL	_io_cli
	LEA	EAX,DWORD [48+EBX]
	MOV	DWORD [84+EBX],EAX
	MOV	DWORD [76+EBX],_end_app
	CALL	_io_sti
	JMP	L54
L145:
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1100+EBP]
	PUSH	96
	CALL	_io_out8
	POP	ECX
	POP	EBX
	JMP	L53
L144:
	MOV	DWORD [-1100+EBP],-1
	JMP	L52
L143:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1096+EBP],1
	CALL	_fifo32_put
	PUSH	DWORD [-1096+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L51
L142:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1096+EBP],2
	CALL	_fifo32_put
	PUSH	DWORD [-1096+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L50
L141:
	PUSH	237
	LEA	EBX,DWORD [-76+EBP]
	PUSH	EBX
	XOR	DWORD [-1096+EBP],4
	CALL	_fifo32_put
	PUSH	DWORD [-1096+EBP]
	PUSH	EBX
	CALL	_fifo32_put
	ADD	ESP,16
	JMP	L49
L140:
	MOV	DWORD [-1104+EBP],0
	JMP	L48
L139:
	MOV	DWORD [-1104+EBP],1
	JMP	L47
L138:
	AND	DWORD [-1092+EBP],-3
	JMP	L46
L137:
	AND	DWORD [-1092+EBP],-2
	JMP	L45
L136:
	OR	DWORD [-1092+EBP],2
	JMP	L44
L135:
	OR	DWORD [-1092+EBP],1
	JMP	L43
L134:
	TEST	EDI,EDI
	JE	L41
	PUSH	EDI
	CALL	_keywin_off
	MOV	EDX,DWORD [24+EDI]
	DEC	EDX
	POP	EAX
	JNE	L42
	MOV	EAX,DWORD [-1040+EBP]
	MOV	EDX,DWORD [16+EAX]
	DEC	EDX
L42:
	MOV	ECX,DWORD [-1040+EBP]
	MOV	EDI,DWORD [20+ECX+EDX*4]
	PUSH	EDI
	CALL	_keywin_on
	POP	EAX
	JMP	L41
L133:
	PUSH	507
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L40
L132:
	PUSH	508
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L39
L131:
	PUSH	509
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L38
L130:
	PUSH	510
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	ECX
	POP	EBX
	JMP	L37
L129:
	PUSH	511
	MOV	EAX,DWORD [36+EDI]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L36
L28:
	MOV	AL,BYTE [_keytable1.1-256+ESI]
	JMP	L114
L27:
	MOV	BYTE [-124+EBP],0
	JMP	L30
L117:
	PUSH	DWORD [-1088+EBP]
	CALL	_task_sleep
	CALL	_io_sti
	JMP	L112
L116:
	PUSH	EBX
	CALL	_fifo32_get
	MOV	DWORD [-1100+EBP],EAX
	CALL	_wait_KBC_sendready
	PUSH	DWORD [-1100+EBP]
	PUSH	96
	CALL	_io_out8
	ADD	ESP,12
	JMP	L19
L4:
	XOR	ESI,ESI
L10:
	MOV	AL,BYTE [_english+ESI]
	MOV	BYTE [ESI+EDI*1],AL
	INC	ESI
	CMP	ESI,4095
	JLE	L10
	MOV	ESI,4096
L15:
	MOV	BYTE [ESI+EDI*1],-1
	INC	ESI
	CMP	ESI,169551
	JLE	L15
	JMP	L5
	GLOBAL	_keywin_on
_keywin_on:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	1
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	PUSH	25
	PUSH	DWORD [4+EBX]
	PUSH	0
	PUSH	0
	PUSH	EBX
	CALL	_sheet_refresh
	ADD	ESP,28
	TEST	BYTE [28+EBX],32
	JNE	L152
L150:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L152:
	PUSH	2
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EBX
	POP	EAX
	JMP	L150
	GLOBAL	_keywin_off
_keywin_off:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	PUSH	0
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_change_wtitle8
	PUSH	25
	PUSH	DWORD [4+EBX]
	PUSH	0
	PUSH	0
	PUSH	EBX
	CALL	_sheet_refresh
	ADD	ESP,28
	TEST	BYTE [28+EBX],32
	JNE	L155
L153:
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
L155:
	PUSH	3
	MOV	EAX,DWORD [36+EBX]
	ADD	EAX,16
	PUSH	EAX
	CALL	_fifo32_put
	POP	EAX
	POP	EDX
	JMP	L153
[SECTION .data]
LC4:
	DB	"Console",0x00
LC5:
	DB	0xC3,0xFC,0xC1,0xEE,0xD0,0xD0,0xB4,0xB0,0xBF,0xDA,0x00
[SECTION .text]
	GLOBAL	_open_console
_open_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	DWORD [8+EBP]
	CALL	_sheet_alloc
	PUSH	250000
	PUSH	3932160
	MOV	EBX,EAX
	CALL	_memman_alloc_4k
	PUSH	-1
	PUSH	500
	MOV	ESI,EAX
	PUSH	500
	PUSH	EAX
	PUSH	EBX
	CALL	_sheet_setbuf
	ADD	ESP,32
	CALL	_task_now
	CMP	DWORD [192+EAX],0
	JNE	L157
	PUSH	0
	PUSH	LC4
	PUSH	500
	PUSH	500
	PUSH	ESI
	CALL	_make_window8
	MOV	DWORD [40+EBX],LC4
L159:
	ADD	ESP,20
	PUSH	0
	PUSH	463
	PUSH	484
	PUSH	28
	PUSH	8
	PUSH	EBX
	CALL	_make_textbox8
	PUSH	DWORD [12+EBP]
	PUSH	EBX
	CALL	_open_constask
	OR	DWORD [28+EBX],32
	MOV	DWORD [36+EBX],EAX
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
L157:
	PUSH	0
	PUSH	LC5
	PUSH	500
	PUSH	500
	PUSH	ESI
	CALL	_make_window8
	MOV	DWORD [40+EBX],LC5
	JMP	L159
	GLOBAL	_open_constask
_open_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	PUSH	512
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	ESI,EAX
	CALL	_task_alloc
	PUSH	65536
	MOV	EBX,EAX
	PUSH	3932160
	CALL	_memman_alloc_4k
	MOV	EDX,DWORD [8+EBP]
	MOV	DWORD [76+EBX],_console_task
	MOV	DWORD [172+EBX],EAX
	ADD	EAX,65524
	MOV	DWORD [100+EBX],EAX
	MOV	DWORD [116+EBX],8
	MOV	DWORD [120+EBX],16
	MOV	DWORD [124+EBX],8
	MOV	DWORD [128+EBX],8
	MOV	DWORD [132+EBX],8
	MOV	DWORD [136+EBX],8
	MOV	DWORD [4+EAX],EDX
	MOV	EDX,DWORD [100+EBX]
	MOV	EAX,DWORD [12+EBP]
	MOV	DWORD [8+EDX],EAX
	LEA	EAX,DWORD [16+EBX]
	PUSH	EBX
	PUSH	ESI
	PUSH	128
	PUSH	EAX
	CALL	_fifo32_init
	ADD	ESP,32
	PUSH	2
	PUSH	2
	PUSH	EBX
	CALL	_task_run
	LEA	ESP,DWORD [-8+EBP]
	MOV	EAX,EBX
	POP	EBX
	POP	ESI
	POP	EBP
	RET
	GLOBAL	_close_constask
_close_constask:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	PUSH	EBX
	CALL	_task_sleep
	PUSH	65536
	PUSH	DWORD [172+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	512
	PUSH	DWORD [16+EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	MOV	DWORD [4+EBX],0
	MOV	EBX,DWORD [-4+EBP]
	LEAVE
	RET
	GLOBAL	_close_console
_close_console:
	PUSH	EBP
	MOV	EBP,ESP
	PUSH	ESI
	PUSH	EBX
	MOV	EBX,DWORD [8+EBP]
	MOV	ESI,DWORD [36+EBX]
	PUSH	250000
	PUSH	DWORD [EBX]
	PUSH	3932160
	CALL	_memman_free_4k
	PUSH	EBX
	CALL	_sheet_free
	MOV	DWORD [8+EBP],ESI
	ADD	ESP,16
	LEA	ESP,DWORD [-8+EBP]
	POP	EBX
	POP	ESI
	POP	EBP
	JMP	_close_constask
